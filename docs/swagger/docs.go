// Package swagger Code generated by swaggo/swag. DO NOT EDIT
package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/healthz": {
            "get": {
                "description": "Check API and database connectivity",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Monitoring"
                ],
                "summary": "Health Check",
                "responses": {
                    "200": {
                        "description": "Service healthy"
                    },
                    "503": {
                        "description": "Service unhealthy"
                    }
                }
            }
        },
        "/refresh-token": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Generate new access token using refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh JWT token",
                "parameters": [
                    {
                        "description": "Refresh token request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token refreshed successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Success"
                        }
                    },
                    "401": {
                        "description": "Invalid or expired refresh token",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/sign-in": {
            "post": {
                "description": "Authenticate user with email and password, returns JWT tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Sign in user",
                "parameters": [
                    {
                        "description": "Sign in request with user credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.SignInRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sign in successful",
                        "schema": {
                            "$ref": "#/definitions/response.Success"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "422": {
                        "description": "Validation errors",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "423": {
                        "description": "Account locked",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/sign-in-guest": {
            "post": {
                "description": "Authenticate guest user without credentials, returns limited access tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Sign in guest",
                "parameters": [
                    {
                        "description": "Guest sign in request with optional user agent",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.SignInGuestRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Guest sign in successful",
                        "schema": {
                            "$ref": "#/definitions/response.Success"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "403": {
                        "description": "Guest sign in disabled",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "429": {
                        "description": "Guest session limit reached",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/sign-out": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Revoke user session and invalidate JWT tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Sign out user",
                "responses": {
                    "200": {
                        "description": "Successfully signed out",
                        "schema": {
                            "$ref": "#/definitions/response.Success"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/sign-up": {
            "post": {
                "description": "Register a new user account with email, password, and profile information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Sign up new user",
                "parameters": [
                    {
                        "description": "Sign up request with user details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.SignUpRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Success"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "409": {
                        "description": "Email already exists",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "422": {
                        "description": "Validation errors",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/training/last": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve the most recent training session for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Training"
                ],
                "summary": "Get user's last training session",
                "responses": {
                    "200": {
                        "description": "Last training session retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.Success"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/training.TrainingSessionResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "No training sessions found",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/training/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve detailed training information by training ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Training"
                ],
                "summary": "Get training by ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"8c4a2d27-56e2-4ef3-8a6e-43b812345abc\"",
                        "description": "Training ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Training retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.Success"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/training.TrainingResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "404": {
                        "description": "Training not found",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.RefreshTokenRequest": {
            "type": "object",
            "properties": {
                "refreshToken": {
                    "type": "string",
                    "example": "deadc0de1234567890"
                }
            }
        },
        "auth.SignInGuestRequest": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer",
                    "example": 30
                },
                "height": {
                    "type": "number",
                    "example": 180
                },
                "weight": {
                    "type": "number",
                    "example": 75.5
                }
            }
        },
        "auth.SignInRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "SecurePassword123"
                }
            }
        },
        "auth.SignUpRequest": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer",
                    "example": 30
                },
                "confirmPassword": {
                    "type": "string",
                    "example": "SecurePassword123"
                },
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "height": {
                    "type": "number",
                    "example": 180
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "password": {
                    "type": "string",
                    "example": "SecurePassword123"
                },
                "weight": {
                    "type": "number",
                    "example": 75.5
                }
            }
        },
        "response.Error": {
            "type": "object",
            "properties": {
                "errors": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "response.Success": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "training.TrainingResponse": {
            "type": "object",
            "properties": {
                "calories": {
                    "type": "integer",
                    "example": 120
                },
                "categoryCode": {
                    "type": "string",
                    "example": "BREASTSTROKE"
                },
                "content": {
                    "type": "string",
                    "example": "\u003cp\u003eHTML content here\u003c/p\u003e"
                },
                "descriptions": {
                    "type": "string",
                    "example": "Short description about this training"
                },
                "id": {
                    "type": "string",
                    "example": "8c4a2d27-56e2-4ef3-8a6e-43b812345abc"
                },
                "level": {
                    "type": "string",
                    "example": "beginner"
                },
                "name": {
                    "type": "string",
                    "example": "Breaststroke Basics"
                },
                "thumbnailUrl": {
                    "type": "string",
                    "example": "https://cdn.example.com/thumbs/breaststroke.png"
                },
                "time": {
                    "type": "string",
                    "example": "10-15 min"
                },
                "videoUrl": {
                    "type": "string",
                    "example": "https://cdn.example.com/videos/breaststroke.mp4"
                }
            }
        },
        "training.TrainingSessionResponse": {
            "type": "object",
            "properties": {
                "distance": {
                    "type": "integer",
                    "example": 1500
                },
                "id": {
                    "type": "string",
                    "example": "8c4a2d27-56e2-4ef3-8a6e-43b812345abc"
                },
                "pace": {
                    "type": "number",
                    "example": 1.2
                },
                "time": {
                    "type": "integer",
                    "example": 1800
                },
                "trainingId": {
                    "type": "string",
                    "example": "8c4a2d27-56e2-4ef3-8a6e-43b812345abc"
                },
                "userId": {
                    "type": "string",
                    "example": "a1b2c3d4-e5f6-7890-1234-567890abcdef"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "externalDocs": {
        "description": "Swimo GitHub Repository",
        "url": "https://github.com/rizkyharahap/swimo"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{"http", "https"},
	Title:            "Swimo API",
	Description:      "This is the API documentation for Swimo - a swimming management and tracking application.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
